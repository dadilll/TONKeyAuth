// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/oauth/authorize": {
            "get": {
                "description": "Generate a one-time nonce for TON OAuth.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate authorization challenge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Redirect URI",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Scope",
                        "name": "scope",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AuthorizeResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/oauth/jwks": {
            "get": {
                "description": "Get public keys to verify JWT tokens issued by TON OAuth.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jwks"
                ],
                "summary": "Get JSON Web Key Set (JWKS)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.JWKSResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/oauth/token": {
            "post": {
                "description": "Create JWT after successful verification of TON wallet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create JWT token",
                "parameters": [
                    {
                        "description": "Token request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TokenRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, verification failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/oauth/verify": {
            "post": {
                "description": "Verify signed message from TON wallet using ed25519.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify TON wallet signature",
                "parameters": [
                    {
                        "description": "Verify request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, signature invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        },
        "/oauth/verify-token": {
            "post": {
                "description": "Verify JWT issued by TON OAuth service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify JWT token",
                "parameters": [
                    {
                        "description": "Token request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyTokenRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyTokenResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, token invalid",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponseDTO"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthorizeResponseDTO": {
            "type": "object",
            "properties": {
                "challenge": {
                    "description": "Unique challenge (nonce) to be signed by the user's TON wallet\nexample: nonce1234567890",
                    "type": "string"
                },
                "client_id": {
                    "description": "Client ID of the application requesting authorization\nexample: abc123def456",
                    "type": "string"
                },
                "expiresAt": {
                    "description": "Expiration time of the challenge\nexample: 2025-09-07T00:00:00Z",
                    "type": "string"
                },
                "redirect_uri": {
                    "description": "Redirect URI to which the user will be sent after authorization\nexample: https://example.com/callback",
                    "type": "string"
                }
            }
        },
        "dto.ErrorResponseDTO": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Optional detailed information about the error\nexample: \"field 'redirect_uri' is required\"",
                    "type": "string"
                },
                "error": {
                    "description": "Short error message\nexample: Validation failed",
                    "type": "string"
                }
            }
        },
        "dto.JWK": {
            "type": "object",
            "required": [
                "alg",
                "e",
                "kid",
                "kty",
                "n",
                "use"
            ],
            "properties": {
                "alg": {
                    "description": "Algorithm\nrequired: true\nexample: RS256",
                    "type": "string",
                    "example": "RS256"
                },
                "e": {
                    "description": "Exponent for RSA public key\nrequired: true\nexample: AQAB",
                    "type": "string",
                    "example": "AQAB"
                },
                "kid": {
                    "description": "Key ID\nrequired: true\nexample: key1",
                    "type": "string",
                    "example": "key1"
                },
                "kty": {
                    "description": "Key type\nrequired: true\nexample: RSA",
                    "type": "string",
                    "example": "RSA"
                },
                "n": {
                    "description": "Modulus for RSA public key\nrequired: true\nexample: 0vx7agoebGcQSuuPiLJXZptNnP9Z...",
                    "type": "string",
                    "example": "0vx7agoebGcQSuuPiLJXZptNnP9Z..."
                },
                "use": {
                    "description": "Intended use of the key\nrequired: true\nexample: sig",
                    "type": "string",
                    "example": "sig"
                }
            }
        },
        "dto.JWKSResponseDTO": {
            "type": "object",
            "required": [
                "keys"
            ],
            "properties": {
                "keys": {
                    "description": "Array of JSON Web Keys\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.JWK"
                    }
                }
            }
        },
        "dto.TokenRequestDTO": {
            "type": "object",
            "required": [
                "message",
                "publicKey",
                "signature"
            ],
            "properties": {
                "message": {
                    "description": "Original message that was signed\nrequired: true\nexample: TON OAuth challenge message",
                    "type": "string",
                    "example": "TON OAuth challenge message"
                },
                "publicKey": {
                    "description": "Public key of the TON wallet in base64 format\nrequired: true\nexample: dGVzdF9wdWJsaWNfa2V5X2RhdGE=",
                    "type": "string",
                    "example": "dGVzdF9wdWJsaWNfa2V5X2RhdGE="
                },
                "signature": {
                    "description": "Signature of the message in base64 format\nrequired: true\nexample: c2lnbmF0dXJlX2RhdGFfYmFzZTY0X2Zvcm1hdA==",
                    "type": "string",
                    "example": "c2lnbmF0dXJlX2RhdGFfYmFzZTY0X2Zvcm1hdA=="
                }
            }
        },
        "dto.TokenResponseDTO": {
            "type": "object",
            "required": [
                "jwt"
            ],
            "properties": {
                "jwt": {
                    "description": "JWT token issued after successful verification\nrequired: true\nexample: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.VerifyRequestDTO": {
            "type": "object"
        },
        "dto.VerifyResponseDTO": {
            "type": "object",
            "properties": {
                "expiresAt": {
                    "description": "Expiration timestamp of the verification\nrequired: true\nexample: 2025-09-07T00:00:00Z",
                    "type": "string",
                    "example": "2025-09-07T00:00:00Z"
                },
                "issuer": {
                    "description": "Issuer of the verification\nrequired: true\nexample: TON OAuth Service",
                    "type": "string",
                    "example": "TON OAuth Service"
                },
                "nonce": {
                    "description": "Nonce used in the signed message\nrequired: true\nexample: nonce1234567890",
                    "type": "string",
                    "example": "nonce1234567890"
                },
                "valid": {
                    "description": "Indicates if the signature is valid\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "wallet": {
                    "description": "Wallet address of the signer\nrequired: true\nexample: EQC1234567890abcdef...",
                    "type": "string",
                    "example": "EQC1234567890abcdef..."
                }
            }
        },
        "dto.VerifyTokenRequestDTO": {
            "type": "object",
            "required": [
                "jwt"
            ],
            "properties": {
                "jwt": {
                    "description": "JWT token string to verify\nrequired: true\nexample: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string",
                    "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.VerifyTokenResponseDTO": {
            "type": "object",
            "properties": {
                "exp": {
                    "description": "Expiration timestamp of the token (Unix time)\nrequired: true\nexample: 1751913600",
                    "type": "integer",
                    "example": 1751913600
                },
                "issuer": {
                    "description": "Issuer of the JWT token\nrequired: true\nexample: TON OAuth Service",
                    "type": "string",
                    "example": "TON OAuth Service"
                },
                "valid": {
                    "description": "Indicates if the token is valid\nrequired: true\nexample: true",
                    "type": "boolean",
                    "example": true
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
